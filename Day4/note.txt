20190703主要讲解知识点：
	1）触控屏的使用。
	2）线程的创建与使用。
	3）账号登陆界面的设计。

一、触控屏的使用。
	主要：获取触控屏X轴和Y轴坐标的数值。
	1）检测一下触控屏是否可用。
	cat /dev/input/event0
	点击触控屏，若实时显示乱码，触控屏是可用的。
	结束检测Ctrl + C
	
	2）Linux系统中input.h中的结构体可以获取触控屏所有的数据。
		分析触控屏数据，筛选出X轴和Y轴坐标的数值。
	编程思路：
		1）打开触控屏。
		2）读取触控屏的信息到结构体中，并分析结构体的信息
		/*
		 * The event structure itself
		 */
		struct input_event {
			struct timeval time;//点击触控屏的时间
			__u16 type;//事件的类型
			__u16 code;//事件类型的属性
			__s32 value;//事件类型属性的数值
		};	
		3）关闭触控屏。
	
	type:3; code:0; value:457
	type:3; code:1; value:349
	type:3; code:24; value:200
	type:1; code:330; value:1
	type:0; code:0; value:0
	type:3; code:24; value:0
	type:1; code:330; value:0
	type:0; code:0; value:0	
		
	type:3; code:0; value:457//X轴坐标值
	type:3; code:1; value:349//Y轴坐标值
	type:3; code:24; value:200	
	type:3; code:24; value:0
	/*
	 * Event types
	 */
	#define EV_SYN			0x00//同步事件
	#define EV_KEY			0x01//按键事件
	#define EV_ABS			0x03//绝对坐标事件
	
	/*
	 * Absolute axes
	 */
	#define ABS_X			0x00//X轴坐标的属性
	#define ABS_Y			0x01//Y轴坐标的属性
	#define ABS_PRESSURE		0x18//压力值属性。（规定：按下压力值均为200；松开压力值均为0）
	
	type:1; code:330; value:1
	type:1; code:330; value:0
	
	#define BTN_TOUCH		0x14a//手指的状态属性。（规定：1按下； 0松开）
	
	练习7：
	1）编写一个程序task.c，实现如下功能：
		1）在X:0~200；Y：0~480区域内显示红色。
		2）在X:600~800；Y：0~480区域内显示蓝色。
		3）在X:200~600；Y：0~480区域内显示绿色。
		4）手指点击对应的区域才显示对应区域的颜色。
			例如：点击一个X:0~200；Y：0~480区域，在这个区域内显示红色。
				  再点击一次，显示白色。
	完成后验收，验收后提交程序：000-张三-李四(7).c	
	
	2）修改bmp.c程序，实现对应的功能。

二、线程的创建与使用。
	线程（英语：thread）是操作系统能够进行运算调度的最小单位。
	线程可以在同一时刻并行执行不同的任务。
	pthread_create、pthread_exit、pthread_join
	
	man -f pthread_create
	man 3 pthread_create
	功能：创建一条新的线程。
	#include<pthread.h>
	int pthread_create(pthread_t *tidp,
						const pthread_attr_t *attr,
						(void*)(*start_rtn)(void*),
						void *arg);
	pthread_t *tidp：线程的ID号。（一般定义一个pthread_t类型的变量）
	const pthread_attr_t *attr：线程的分离属性。（NULL）
	(void*)(*start_rtn)(void*)：线程函数。
	void *arg：线程函数的参数。
	
	注意：在编译的时候，需要加参数-lpthread
	举例：arm-linux-gcc hello.c -o armhello -lpthread
	
	pthread_exit
	功能：终止/结束正在运行的线程。
	#include<pthread.h>
	void pthread_exit(void* retval);
	void* retval：线程结束后会返回一个结束地址。（NULL）
	
	pthread_join
	功能：等待一个线程的结束。
	#include<pthread.h>
	int pthread_join(pthread_t thread, void **retval);
	pthread_t thread：线程的ID号。
	void **retval：NULL

	函数名： sleep、usleep
	功 能： 执行挂起一段时间
	头文件： #include <unistd.h>
	区 别： unsigned int sleep (unsigned int seconds);//n秒
			int usleep (useconds_t usec);//n微秒
	
	举例：
		在LCD屏幕上，同时执行两个任务并发处理。
		任务一：
		在X：0~400;Y：0~480区域内，每隔1s按照RGB顺序循环显示对应颜色的色块。
		任务二：
		在X：400~800;Y：0~480区域内，每隔1s按照BGR顺序循环显示对应颜色的色块。	
	
	编译：
		arm-linux-gcc pthread_create.c -o arm1 -lpthread
		
	练习8：
		在LCD屏幕上，同时执行4个任务并发处理。
		任务一：（线程一）
		在X：0~400;Y：0~240区域内，每隔10*1000us按照RGB顺序循环显示对应颜色的色块。
		任务二：（线程二）
		在X：400~800;Y：0~240区域内，每隔100*1000us按照RGB顺序循环显示对应颜色的色块。
		任务三：（线程三）
		在X：0~400;Y：240~480区域内，每隔1s按照RGB顺序循环显示对应颜色的色块。
		任务四：（线程四）
		在X：400~800;Y：240~480区域，每隔2s按照RGB顺序循环显示对应颜色的色块。
		
		main函数中只创建线程。

三、账号登陆界面的设计。		
	练习9：
		1）显示账号登陆界面。(3 分)
		2）在本系统中，默认设置初始的账号和密码。（3 分） 
		规定：原始账号：123456；原始密码：123456 
		char login_account[7] = "123456";
		char login_password[7] = "123456";
		
		3）点击“账号”，进入输入账号的功能，是能够显性显示 0~9 账号，
		输入错误时，能 点击“<--”箭头清空输入的账号。（6 分） 
		char input_account[7];
		char input_password[7];		
		
		input_account[0] = '0';
		
		4）点击“密码”，进入输入密码的功能，是能够隐性显示 0~9 密码，
		输入错误时，能 点击“<--”箭头清空输入的密码。（6 分） 
		
		5）确定账号和密码均输入后，才进行密码和账号的匹配。（3 分） 
		
		6）匹配的结果：  
				1）匹配成功：则全屏显示绿色 1s，进入总功能控制界面。（3 分） 
				2）匹配失败： （6 分） 
						1）则全屏显示红色 1s，1s 后重新进入账号登陆界面。    
						2）有 3 次输入的机会，若 3 次输入均失败，则全屏显示黑色，退出整个系统。	
		strcmp、strncmp
		功能：字符串的匹配。
		NAME
			   strcmp, strncmp - compare two strings
		SYNOPSIS
			   #include <string.h>
			   int strcmp(const char *s1, const char *s2);
			   int strncmp(const char *s1, const char *s2, size_t n);
			   
		根据strcmp函数的返回值是否是0来判断两个字符串是否一致。
		strncmp：精准比较
			
	int login(void)
	{
	
		return 0;
	}	
	int main(void)
	{
		login();
	}